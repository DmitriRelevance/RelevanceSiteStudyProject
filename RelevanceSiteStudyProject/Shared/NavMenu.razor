@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Identity
@using RelevanceSiteStudyProject.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<Data.User> SignInManager
@inject UserManager<Data.User> UserManager
@inject NavigationManager Navigation

<nav class="navbar navbar-expand-lg navbar-dark bg-dark px-4">
    <a class="navbar-brand" href="/">Study App</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
            <li class="nav-item">
                <NavLink class="nav-link" href="/pagination-posts">Pagination</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/scroll-posts">Infinite Scroll</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/db-posts">Database Posts</NavLink>
            </li>
            @if (!isAuthorized)
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href="/login">Login</NavLink>
                </li>
            }
            else
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href="@($"/logout?returnUrl={Uri.EscapeDataString(Navigation.Uri)}")">Logout</NavLink>
                </li>
            }
        </ul>
    </div>
</nav>

@code {
    private bool isAuthorized;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthorized = user.Identity?.IsAuthenticated ?? false;
    }
}