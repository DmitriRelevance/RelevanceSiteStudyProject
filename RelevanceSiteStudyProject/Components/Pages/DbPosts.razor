@using RelevanceSiteStudyProject.Data
@using RelevanceSiteStudyProject.Services
@inject IPostService _postService
@rendermode InteractiveServer
@page "/db-posts"

<h1>Db Posts</h1>

@if (currentUser == null)
{
    <p>Please log in to continue.</p>
    <button class="btn btn-primary" @onclick="LogInAsAdmin">Log In as Admin</button>
    <button class="btn btn-primary" @onclick="LogInAsUser">Log In as Regular User</button>
    <p>Regular user have access only for his posts.</p>
}
else
{
    <h2>Welcome, @currentUser.Name!</h2>

    <EditForm Model="@postModel" OnValidSubmit="CreatePost">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <h3>Create Post</h3>
            <div>
                <label for="postTitle">Title</label>
                <InputText id="postTitle" class="form-control" @bind-Value="postModel.Title" placeHolder="Title"></InputText>
            </div>
            <div>
                <label for="postContent">Content</label>
                <InputTextArea id="postContent" class="form-control" @bind-Value="postModel.Content" placeHolder="Content"></InputTextArea>
            </div>
            <button type="submit" class="btn btn-primary mt-2">Create Post</button>
        </div>
    </EditForm>
}

<h3>Posts</h3>

@if (@isLoading)
{
    <p>Loading posts...</p>
}
else if (posts.Count == 0)
{
    <p>No posts available.</p>
}
else
{
    <ul class="list-group">
        @foreach (var post in posts)
        {
            <li class="list-group-item">
                <h5>@post.Title</h5>
                <p>@post.Content</p>
            </li>
        }
    </ul>
}


@code {
    private bool isLoading = true;
    private List<Post> posts = new();
    private User? currentUser;
    private Post postModel = new Post();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            posts = await _postService.GetPosts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading posts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void LogInAsAdmin()
    {
        currentUser = new User { Id = 1, Name = "Admin", IsAdmin = true };
        StateHasChanged();
    }

    private void LogInAsUser()
    {
        currentUser = new User { Id = 2, Name = "Regular User", IsAdmin = false };
        StateHasChanged();
    }

    private async Task CreatePost()
    {
        if (currentUser == null)
        {
            Console.WriteLine("You must be logged in to create a post.");
            return;
        }

        var newPost = new Post
        {
            Title = postModel.Title,
            Content = postModel.Content,
            UserId = currentUser.Id,
            CategoryId = 1,
        };
        var addedPost = _postService.Add(newPost);
        //Update the posts list with the new post
        posts = await _postService.GetPosts();
        postModel = new Post();

    }

    private async Task DeletePost(Post post, User currentUser)
    {
        try
        {
            await _postService.Delete(post, currentUser);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting post: {ex.Message}");
        }
    }
}
