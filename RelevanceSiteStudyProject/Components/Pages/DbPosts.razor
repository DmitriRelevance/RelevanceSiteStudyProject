@using Microsoft.AspNetCore.Components.Forms
@using RelevanceSiteStudyProject.Interfaces
@using RelevanceSiteStudyProject.Helpers
@using RelevanceSiteStudyProject.Services
@using RelevanceSiteStudyProject.ViewModels

@inject IPostService _postService
@inject ILogger<DbPosts> _logger
@rendermode InteractiveServer
@page "/db-posts"

<h1>Db Posts</h1>

@if(statusMessage.HasValue)
{
    <div class="alert alert-@(statusMessage.Value.IsSuccess ? "sucess" : "danger")" role="alert">
        <strong>@(statusMessage.Value.IsSuccess ? "Success!" : "Error!")</strong>
        @statusMessage.Value.Message
    </div>
}

@if (currentUser == null)
{
    <p>Please log in to continue.</p>
    <button class="btn btn-primary" @onclick="LogInAsAdmin">Log In as Admin</button>
    <button class="btn btn-primary" @onclick="LogInAsUser">Log In as Regular User</button>
    <p>Regular user have access only for his posts.</p>
}
else
{
    <h2>Welcome, @currentUser.Name!</h2>

    <EditForm Model="@postModel" OnValidSubmit="CreatePost">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <h3>Write a new post</h3>
            <div>
                <label for="postTitle">Title</label>
                <InputText id="postTitle" class="form-control" @bind-Value="postModel.Title" placeHolder="Title"></InputText>
            </div>
            <div>
                <label for="postContent">Content</label>
                <InputTextArea id="postContent" class="form-control" @bind-Value="postModel.Content" placeHolder="Content"></InputTextArea>
            </div>
            <button type="submit" class="btn btn-primary mt-2">Create Post</button>
        </div>
    </EditForm>
}

<h3>Posts</h3>

@if (@isLoading)
{
    <p>Loading posts...</p>
}
else if (posts.Count == 0)
{
    <p>No posts available.</p>
}
else
{
    <ul class="list-group">
        @foreach (var post in posts)
        {
            <li class="list-group-item">
                <h5>@post.Title</h5>
                <p>@post.Content</p>
                @if (currentUser != null && (currentUser.IsAdmin || post.UserId == currentUser.Id))
                {
                    <button class="btn btn-secondary" @onclick="() => EditPost(post)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeletePost(post)">Delete</button>

                    @if (isEditing && postToEdit?.Id == post.Id)
                    {
                        <EditForm Model="@postToEdit" OnValidSubmit="SaveEdit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <h3>Edit Post</h3>
                                <div>
                                    <label for="postTitle">Title</label>
                                    <InputText id="postTitle" class="form-control" @bind-Value="postToEdit.Title" placeHolder="@postToEdit.Title"></InputText>
                                </div>
                                <div>
                                    <label for="postContent">Content</label>
                                    <InputTextArea id="postContent" class="form-control" @bind-Value="postToEdit.Content" placeHolder="@postToEdit.Content"></InputTextArea>
                                </div>
                                <button type="submit" class="btn btn-primary mt-2">Save changes</button>
                                <button class="btn btn-secondary mt-2" @onclick="() => isEditing = false">Cancel</button>
                            </div>
                        </EditForm>
                    }
                }
            </li>
        }
    </ul>
}


@code {
    private bool isLoading = true;
    private IList<Post> posts = new List<Post>();
    private User? currentUser;
    private Post postModel = new();
    private bool isEditing = false;
    private Post? postToEdit = null;
    private (bool IsSuccess, string Message)? statusMessage;


    protected override async Task OnInitializedAsync()
    {
        await GetPosts();
    }

    private void LogInAsAdmin()
    {
        currentUser = new User { Id = 1, Name = "Admin", IsAdmin = true };
        StateHasChanged();
    }

    private void LogInAsUser()
    {
        currentUser = new User { Id = 2, Name = "Regular User", IsAdmin = false };
        StateHasChanged();
    }

    private async Task CreatePost()
    {
        if (currentUser == null) return;

        var newPost = new Post
        {
            Title = postModel.Title,
            Content = postModel.Content,
            UserId = currentUser.Id,
            CategoryId = 1
        };
        var addedPost = _postService.Add(newPost);
        //Update the posts list with the new post
        await GetPosts();
        postModel = new Post();
        statusMessage = (true, "Successfully added a post!");
    }

    /// <summary>
    /// Refresh the posts list after editing
    /// </summary>
    /// <returns></returns>
    private async Task GetPosts()
    {
        try
        {
            isLoading = true;
            posts = await _postService.GetPosts();
            _logger.LogInformation($"Loaded {posts.Count} posts.");
            //statusMessage = (true, "Posts loaded successfully.");
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error loading posts: {ex.Message}");
            statusMessage = (false, "Failed to create post. Please try again.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task EditPost(Post post)
    {
        if (currentUser == null || (!currentUser.IsAdmin && post.UserId != currentUser.Id))
        {
            return; // Only allow editing if the user is an admin or the post belongs to the user
        }

        isEditing = true;

        postToEdit = new Post
        {
            Id = post.Id,
            Title = post.Title,
            Content = post.Content,
            UserId = post.UserId,
            CategoryId = post.CategoryId
        };

        StateHasChanged();
    }

    private async Task SaveEdit()
    {
        if (currentUser is null || postToEdit is null)
        {
            return;
        }

        try
        {
            await _postService.Update(postToEdit, currentUser);
            await GetPosts();
            isEditing = false;
            postToEdit = null;
            statusMessage = (true, "Post updated successfully.");
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error updating post: {ex.Message}");
            statusMessage = (false, "Failed to update post. Please try again.");
        }
    }

    private async Task CancelEdit()
    {
        isEditing = false;
        postToEdit = null;
        StateHasChanged();
    }

    private async Task DeletePost(Post post)
    {
        try
        {
            await _postService.Delete(post, currentUser);
            statusMessage = (true, "Post deleted successfully.");
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error deleting post: {ex.Message}");
            statusMessage = (false, "Failed to delete post. Please try again.");
        }

        StateHasChanged();
    }
}
